# Global Variables

### Salt used to deploy the contracts. Recommended to use the same salt across different chains.
CREATE2_SALT="0x0000000000000000000000000000000000000000000000000000000000000001"

### The initial owner of all of the contracts.
OWNER=0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266

# Staking Variables

### The minimum amount of $PROVE needed to stake.
###
### The actual `staked` amount may go below this value. Only used as one part in a multi-part
### deterrence against ERC4626 inflation attacks.
###
### Immutable after deployment.
MIN_STAKE_AMOUNT=10000000000000000 # 0.01 $PROVE

### The maximum amount of unstake requests a staker can have at a time.
###
### Ensures that a staker cannot unintentionally self-DoS themselves by creating enough
### unstake requests to cause an out-of-gas error when calling `finishUnstake`.
###
### Immutable after deployment.
MAX_UNSTAKE_REQUESTS=10

### The minimum delay (in seconds) for an unstake request be finished.
###
### Ensures that a staker cannot frontrun an upcoming prover slash by unstaking early. Should
### be greater than the longest length that a VApp `step` can be delayed by.
###
### Immutable after deployment.
UNSTAKE_PERIOD=1814400 # 21 days

### The minimum delay (in seconds), plus governance parameters, for a slash request to be cancelled.
###
### Cancelling a slash requires `slashCancellationPeriod` + `votingDelay` + `votingPeriod` to ensure
### that governance has had sufficient time finish a slash if needed.
###
### Immutable after deployment.
SLASH_CANCELLATION_PERIOD=604800 # 7 days

### The dispenser that can dispense $PROVE to stakers.
###
### Does not actually hold any $PROVE themselves, simply has the ability to transfer $PROVE from
### the staking contract to the $iPROVE vault, bounded by `maxDispense` which itself is bound
### by `dispenseRate`.
###
### Mutable after deployment by owner.
DISPENSER=0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266

### The maximum amount of $PROVE that can be dispensed per second.
###
### Mutable after deployment by owner.
DISPENSE_RATE=63419583967529173 # 0.063 PROVE/s (20% APY assuming 10M staked)

# VApp Variables

### The minimum amount of $PROVE needed to deposit.
###
### Since each deposit must be processed by the VApp, this prevents DoS from dust amounts.
###
### Mutable after deployment by owner.
MIN_DEPOSIT_AMOUNT=10000000000000000 # 0.01 $PROVE

### The auctioneer of the VApp.
###
### This is the only address that can call `step` function on the VApp.
###
### Mutable after deployment by owner.
AUCTIONEER=0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266

# Governance Variables

### The delay (in blocks) before voting can start on a proposal.
###
### Allows stakers to see an upcoming proposal and have an opportunity to change their delegation
### via `requestUnstake` before the vote starts.
###
### Mutable after deployment by governance.
VOTING_DELAY=7200 # 1 day assuming a 12s blocktime

### The duration (in blocks) that a proposal is open for voting.
###
### Gives an opportunity for provers to `castVote` on a proposal.
###
### Mutable after deployment by governance.
VOTING_PERIOD=100800 # 2 weeks assuming a 12s blocktime

### Minimum $iPROVE needed to create a proposal.
###
### Prevents proposal spam by requiring a prover to have sufficient stake.
###
### Mutable after deployment by governance.
PROPOSAL_THRESHOLD=1000000e18 # 1,000,000 #iPROVE

### Percentage of $iPROVE total supply required to pass a proposal.
###
### Prevents proposals from passing if a large majority of governance did not participate.
###
### Mutable after deployment by governance.
QUORUM_FRACTION=20 # 20%
