syntax = "proto3";

package types;

// Format to help decode signature in backend.
enum MessageFormat {
  // Unspecified message format.
  UNSPECIFIED_MESSAGE_FORMAT = 0;
  // The message is in binary format.
  BINARY = 1;
  // The message is in JSON format.
  JSON = 2;
}

/********************
 *** Transactions ***
 ********************/

enum TransactionVariant {
  REQUEST_VARIANT = 0;
  BID_VARIANT = 1;
  SETTLE_VARIANT = 2;
  EXECUTE_VARIANT = 3;
  FULFILL_VARIANT = 4;
  DELEGATE_VARIANT = 5;
  TRANSFER_VARIANT = 6;
  WITHDRAW_VARIANT = 7;
}

message WithdrawRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  WithdrawRequestBody body = 3;
}

message WithdrawRequestBody {
  // The nonce of the request.
  uint64 nonce = 1;
  // The account address to withdraw from.
  //
  // This should either be the sender or a prover the account owns.
  bytes account = 2;
  // The amount to withdraw.
  string amount = 3;
  // The domain of the request.
  bytes domain = 4;
  // The variant of the transaction.
  TransactionVariant variant = 5;
  // The auctioneer address that will receive the fee.
  bytes auctioneer = 6;
  // The fee to pay for the withdrawal operation.
  string fee = 7;
}

message WithdrawResponseBody {}

message WithdrawResponse {
    // The transaction hash.
    bytes tx_hash = 1;
    // The body of the response.
    WithdrawResponseBody body = 2;
}



/**************
 *** Proofs ***
 **************/

message RequestProofRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  RequestProofRequestBody body = 3;
}

message RequestProofRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The verification key hash of the program.
  bytes vk_hash = 2;
  // The version of the prover to use.
  string version = 3;
  // The mode for the request.
  ProofMode mode = 4;
  // The strategy for fulfiller assignment.
  FulfillmentStrategy strategy = 5;
  // The stdin resource identifier.
  string stdin_uri = 6;
  // The deadline for the request.
  uint64 deadline = 7;
  // The cycle limit for the request.
  uint64 cycle_limit = 8;
  // The gas limit for the request. If 0, the cycle_limit is used.
  uint64 gas_limit = 9;
  // The minimum period a request can be in auction in seconds. Zero indicates no minimum. Only 
  // applicable if the strategy is auction.
  uint64 min_auction_period = 10;
  // The whitelist of provers that can bid and prove this request. An empty list indicates that
  // any prover can participate. Only applicable if the strategy is auction.
  repeated bytes whitelist = 11;
  // The domain separator bytes for the request.
  bytes domain = 12;
  // The auctioneer address.
  bytes auctioneer = 13;
  // The executor address.
  bytes executor = 14;
  // The verifier address.
  bytes verifier = 15;
  // The optional public values hash.
  optional bytes public_values_hash = 16;
  // The base fee for the request.
  string base_fee = 17;
  // The max price per prover gas unit for the request.
  string max_price_per_pgu = 18;
  // The variant of the transaction.
  TransactionVariant variant = 19;
}

message RequestProofResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  RequestProofResponseBody body = 2;
}

message RequestProofResponseBody {
  // The identifier for the request.
  bytes request_id = 1;
}

message ReservedMetadata {
  // The optional ratio of gpu time the proof used on-demand resources versus reserved.
  optional float on_demand_ratio = 1;
}

message FulfillProofRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  FulfillProofRequestBody body = 3;
}

message FulfillProofRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The identifier for the request.
  bytes request_id = 2;
  // The proof bytes.
  bytes proof = 3;
  // The optional metadata for reserved proofs.
  optional ReservedMetadata reserved_metadata = 4;
  // The domain separator for the request.
  bytes domain = 5;
  // The variant of the transaction.
  TransactionVariant variant = 6;
}

message FulfillProofResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  FulfillProofResponseBody body = 2;
}

message FulfillProofResponseBody {}

message ExecuteProofRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  ExecuteProofRequestBody body = 3;
}

message ExecuteProofRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The identifier for the request.
  bytes request_id = 2;
  // The execution status of the request.
  ExecutionStatus execution_status = 3;
  // The optional public values hash of the request execution, only included if
  // the request is valid.
  optional bytes public_values_hash = 4;
  // The optional cycles used when executing the request, only included if the
  // request is valid.
  optional uint64 cycles = 5;
  // The optional amount of gas used when executing the request, only included if
  // the request is valid.
  optional uint64 pgus = 6;
  // The domain separator for the request.
  bytes domain = 7;
  // The punishment amount for the requester.
  optional string punishment = 8;
  // The cause of execution failure, if it failed.
  optional ExecuteFailureCause failure_cause = 9;
  // The variant of the transaction.
  TransactionVariant variant = 10;
}

message ExecuteProofResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  ExecuteProofResponseBody body = 2;
}

message ExecuteProofResponseBody {}

message FailFulfillmentRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  FailFulfillmentRequestBody body = 3;
}

message FailFulfillmentRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The identifier for the request.
  bytes request_id = 2;
}

message FailFulfillmentResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  FailFulfillmentResponseBody body = 2;
}

message FailFulfillmentResponseBody {}

message ProofRequest {
  // The request identifier.
  bytes request_id = 1;
  // The verification key hash of the program.
  bytes vk_hash = 2;
  // The version of the prover to use.
  string version = 3;
  // The mode for the proof.
  ProofMode mode = 4;
  // The strategy for fulfiller assignment.
  FulfillmentStrategy strategy = 5;
  // The program resource identifier.
  string program_uri = 6;
  // The stdin resource identifier.
  string stdin_uri = 7;
  // The deadline for the request.
  uint64 deadline = 8;
  // The cycle limit for the request.
  uint64 cycle_limit = 9;
  // The gas price for the request.
  optional uint64 gas_price = 10;
  // The fulfillment status of the request.
  FulfillmentStatus fulfillment_status = 11;
  // The execution status of the request.
  ExecutionStatus execution_status = 12;
  // The requester address that signed the request.
  bytes requester = 13;
  // The fulfiller address that fulfilled the request.
  optional bytes fulfiller = 14;
  // The optional name to refer to an alias of the program id.
  optional string program_name = 15;
  // The optional name to refer to an alias of the requester address.
  optional string requester_name = 16;
  // The optional name to refer to an alias of the fulfiller address.
  optional string fulfiller_name = 17;
  // The unix timestamp of when the request was created.
  uint64 created_at = 18;
  // The unix timestamp of when the request was updated.
  uint64 updated_at = 19;
  // The unix timestamp of when the request was fulfilled. Only included if
  // the request has a fulfillment status of FULFILLED.
  optional uint64 fulfilled_at = 20;
  // The transaction hash of the request.
  bytes tx_hash = 21;
  // The cycle used during the execution of the request. Only included if the
  // request has an execution status of EXECUTED.
  optional uint64 cycles = 22;
  // The public values hash from the execution of the request. Only included if
  // the request has an execution status of EXECUTED.
  optional bytes public_values_hash = 23;
  // The amount deducted from the fulfiller's balance. Only included if the
  // request has a fulfillment status of ASSIGNED.
  optional string deduction_amount = 24;
  // The amount refunded to the fulfiller's balance. Only included if the
  // request has a fulfillment status of EXECUTED.
  optional string refund_amount = 25;
  // The gas limit for the request.
  uint64 gas_limit = 26;
  // The amount of gas used for the request.
  optional uint64 gas_used = 27;
  // The cause of execution failure, if any.
  ExecuteFailureCause execute_fail_cause = 28;
  // The settlement status of the request.
  SettlementStatus settlement_status = 29;
  // The public program resource identifier.
  string program_public_uri = 30;
  // The public stdin resource identifier.
  string stdin_public_uri = 31;
  // The minimum period a request can be in auction in seconds. Zero indicates no minimum. Only
  // applicable if the strategy is auction.
  uint64 min_auction_period = 32;
  // The whitelist of provers that can bid and prove this request. An empty list indicates that
  // any prover can participate. Only applicable if the strategy is auction.
  repeated bytes whitelist = 33;
  // The base fee for the request.
  optional string base_fee = 34;
  // The max price per prover gas unit for the request.
  optional string max_price_per_pgu = 35;
}

message GetProofRequestStatusRequest {
  // The identifier for the request.
  bytes request_id = 1;
}

message GetProofRequestStatusResponse {
  // The fulfillment status of the request.
  FulfillmentStatus fulfillment_status = 1;
  // The execution status of the request.
  ExecutionStatus execution_status = 2;
  // The transaction hash of the request.
  bytes request_tx_hash = 3;
  // The deadline of the request. A request should be ignored if it is past
  // its deadline.
  uint64 deadline = 4;
  // The optional transaction hash of the proof fulfill. Only included if the
  // request has a fulfillment status of FULFILLED.
  optional bytes fulfill_tx_hash = 5;
  // The optional proof URI, where you can download the result of the request.
  // Only included if the request has a fulfillment status of FULFILLED.
  optional string proof_uri = 6;
  // The optional public values hash from the execution of the request. Only
  // included if the request has an execution status of EXECUTED.
  optional bytes public_values_hash = 7;
  // The optional public proof URI, where you can download the result of the
  // request. Only included if the request has a fulfillment status of FULFILLED.
  optional string proof_public_uri = 8;
}

message GetProofRequestDetailsRequest {
  // The identifier for the request.
  bytes request_id = 1;
}

message GetProofRequestDetailsResponse {
  // The detailed request.
  ProofRequest request = 1;
}

message GetFilteredProofRequestsRequest {
  // The optional version of the requests to filter for.
  optional string version = 1;
  // The optional fulfillment status of the requests to filter for.
  optional FulfillmentStatus fulfillment_status = 2;
  // The optional execution status of the requests to filter for.
  optional ExecutionStatus execution_status = 3;
  // The optional minimum unix timestamp deadline of the requests to filter for.
  // Only returns requests with deadlines after this timestamp.
  optional uint64 minimum_deadline = 4;
  // The optional verification key hash of the program to filter for.
  optional bytes vk_hash = 5;
  // The optional requester address to filter for.
  optional bytes requester = 6;
  // The optional fulfiller address to filter for.
  optional bytes fulfiller = 7;
  // The optional minimum creation unix timestamp of the requests to filter for.
  optional uint64 from = 8;
  // The optional maximum creation unix timestamp of the requests to filter for.
  optional uint64 to = 9;
  // The optional maximum number of requests to return (default is 10,
  // maximum is 100).
  optional uint32 limit = 10;
  // The optional page number to return (default is 1).
  optional uint32 page = 11;
  // The optional mode of the requests to filter for.
  optional ProofMode mode = 12;
  // The optional bidder address to filter out. Only returns requests that
  // have not been bid by this address.
  optional bytes not_bid_by = 13;
  // The optional cause of execution failure.
  optional ExecuteFailureCause execute_fail_cause = 14;
  // The optional settlement status of the requests to filter for.
  optional SettlementStatus settlement_status = 15;
}

message GetFilteredProofRequestsResponse {
  // The requests that matched the filter criteria.
  repeated ProofRequest requests = 1;
}

message GetSearchResultsRequest {
  // The search query string.
  string query = 1;
}

message SearchResult {
  bytes id = 1;
  optional string name = 2;
}

message GetSearchResultsResponse {
  // List of matching request IDs with optional names.
  repeated SearchResult requests = 1;
  // List of matching program IDs with optional names.
  repeated SearchResult programs = 2;
  // List of matching requester IDs with optional names.
  repeated SearchResult requesters = 3;
}

message GetProofRequestMetricsRequest {
  // The optional address to filter for.
  optional bytes address = 1;
  // Deprecated.
  reserved 2;
}

message GetProofRequestMetricsResponse {
  // The total number of proofs.
  uint64 total_proofs = 1;
  // The total number of cycles.
  uint64 total_cycles = 2;
  // Deprecated.
  reserved 3;
  // The total number of programs.
  uint64 total_programs = 4;
}

message GetProofRequestGraphRequest {
  // The optional address to filter for.
  optional bytes address = 1;
  // The optional interval in days for the graph range.
  optional uint64 range_interval_days = 2;
}

message GraphData {
  // The timestamp of the data point.
  string timestamp = 1;
  // The value at this timestamp.
  uint64 value = 2;
}

message GetProofRequestGraphResponse {
  // The time series data points.
  repeated GraphData data = 1;
}

message GetAnalyticsGraphsRequest {
  // The optional address to filter for.
  optional bytes address = 1;
  // The optional interval in days for the graph range.
  optional uint64 range_interval_days = 2;
}

message GetAnalyticsGraphsResponse {
  // Deprecated: The cumulative time series data points for proof count.
  reserved 1;
  // Deprecated: The time series data points for program count.
  reserved 2;
  // Deprecated: The time series data points for cycle count.
  reserved 3;
  // The daily time series data points for auction success rate.
  repeated GraphData auction_success_rate = 4;
  // The daily time series data points for proof count.
  repeated GraphData proofs = 5;
  // The daily time series data points for PROVE / M gas ratio.
  repeated GraphData rewards_mgas = 6;
}

message GetOverviewGraphsRequest {
  // The optional address to filter for.
  optional bytes address = 1;
}

message GetOverviewGraphsResponse {
  // The daily time series data points for proof count.
  repeated GraphData proofs = 1;
  // The daily time series data points for cycle count.
  repeated GraphData cycles = 2;
  // The daily time series data points for program count.
  repeated GraphData programs = 3;
}

message GetProofRequestParamsRequest {
  // The mode for the request.
  ProofMode mode = 1;
}

message GetProofRequestParamsResponse {
  // The domain separator bytes.
  bytes domain = 1;
  // The default auctioneer address.
  bytes auctioneer = 2;
  // The default executor address.
  bytes executor = 3;
  // The default verifier address.
  bytes verifier = 4;
  // The default max price per prover gas unit.
  string max_price_per_pgu = 5;
  // The base fee for the specified proof mode.
  string base_fee = 6;
}

/****************
 *** Accounts ***
 ****************/

message GetNonceRequest {
  // The address of the account.
  bytes address = 1;
}

message GetNonceResponse {
  // The nonce of the account.
  uint64 nonce = 1;
}

message SetAccountNameRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetAccountNameRequestBody body = 3;
}

message SetAccountNameRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The address of the account to update the name of. Only the sender can
  // update the name unless authorized.
  bytes address = 2;
  // The name of the account. Must be unique.
  string name = 3;
}

message SetAccountNameResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetAccountNameResponseBody body = 2;
}

message SetAccountNameResponseBody {}

message GetAccountNameRequest {
  // The address of the account.
  bytes address = 1;
}

message GetAccountNameResponse {
  // The name of the account.
  optional string name = 1;
}

message GetOwnerRequest {
  // The address of the account.
  bytes address = 1;
}

message GetOwnerResponse {
  // The owner of the account.
  bytes owner = 1;
}

message GetTermsSignatureRequest {
  // The address of the account.
  bytes address = 1;
}

message GetTermsSignatureResponse {
  // Whether the account has signed the terms.
  bool is_signed = 1;
}

message SetTermsSignatureRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetTermsSignatureRequestBody body = 3;
}

message SetTermsSignatureRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The message accepting the terms of service.
  string message = 3;
}

message SetTermsSignatureResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetTermsSignatureResponseBody body = 2;
}

message SetTermsSignatureResponseBody {}

message Account {
  // The address of the account.
  bytes address = 1;
  // The custom name of the account (optional).
  optional string name = 2;
  // The twitter handle of the account (optional).
  optional string twitter_id = 3;
  // The twitter name of the account (optional).
  optional string twitter_name = 4;
  // The twitter username of the account (optional).
  optional string twitter_handle = 5;
  // The twitter image of the account (optional).
  optional string twitter_image = 6;
  // Whether the account wants to use their twitter handle to set their name.
  bool use_twitter_handle = 7;
  // Whether the account wants to use their twitter image to set their image.
  bool use_twitter_image = 8;
  // The code of the account (optional).
  optional string code = 9;
  // Whether the account has completed onboarding.
  bool is_onboarded = 10;
  // The version of the captcha game the account has completed.
  optional int32 last_captcha_version = 11;
  // The turbo high score of the account.
  optional int32 turbo_high_score = 12;
  // The version of the quiz game the account has completed.
  optional int32 last_quiz_version = 13;
  // The whitelist id of the account (optional).
  optional int64 whitelist_id = 14;
  // The social platform type from the whitelist (optional).
  optional SocialPlatform whitelist_social_platform = 15;
  // The social handle from the whitelist (optional).
  optional string whitelist_social_handle = 16;
  // The social id from the whitelist (optional).
  optional string whitelist_social_id = 17;
  // The social image from the whitelist (optional).
  optional string whitelist_social_image = 18;
  // Whether the user completed whitelist social auth.
  optional bool whitelist_has_social_auth = 19; 
  // The gpu ID of the account (optional).
  optional int64 gpu_id = 20;
  // The gpu delegate address (optional).
  optional bytes gpu_delegate = 21;
  // The gpu variant type (optional).
  optional GpuVariant gpu_variant = 22;
  // The proving address of the account (optional). Only included if not delegating to Succinct's
  // auction fulfiller.
  optional bytes proving_address = 23;
  // The 2048 high score of the account.
  optional int32 high_score_2048 = 24;
  // The crab volleyball high score of the account.
  optional int32 high_score_volleyball = 25;
  // The coin craze high score of the account.
  optional int32 high_score_coin_craze = 26;
  // The turbo time trial high score of the account.
  optional int32 high_score_turbo_trials = 27;
  // The turbo time trial best rate of the account.
  optional float best_rate_turbo_trials = 28;
  // The gpu coordinates (optional).
  optional string gpu_coordinates = 29;
  // The unix timestamp of when the gpu was created (optional).
  optional uint64 gpu_created_at = 30;
  // The lean high score of the account.
  optional int32 high_score_lean = 31;
}

message GetAccountRequest {
  // The address of the account.
  bytes address = 1;
}

message GetAccountResponse {
  // The account details.
  Account account = 1;
}

message GetTEEWhitelistStatusRequest {
  // The address of the account.
  bytes address = 1;
}

message GetTEEWhitelistStatusResponse {
  // The whitelist status.
  bool is_whitelisted = 1;
}

/****************
 *** Programs ***
 ***************/

 message Program {
  // The verification key hash.
  bytes vk_hash = 1;
  // The verification key.
  bytes vk = 2;
  // The program resource identifier.
  string program_uri = 3;
  // The optional name of the program.
  optional string name = 4;
  // The owner of the program.
  bytes owner = 5;
  // The unix timestamp of when the program was created.
  uint64 created_at = 6;
}

message GetProgramRequest {
  // The verification key hash of the program.
  bytes vk_hash = 1;
}

message GetProgramResponse {
  // The program details.
  Program program = 1;
}

message CreateProgramRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  CreateProgramRequestBody body = 3;
}

message CreateProgramRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The verification key hash.
  bytes vk_hash = 2;
  // The verification key.
  bytes vk = 3;
  // The program resource identifier.
  string program_uri = 4;
}

message CreateProgramResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  CreateProgramResponseBody body = 2;
}

message CreateProgramResponseBody {}

message SetProgramNameRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetProgramNameRequestBody body = 3;
}

message SetProgramNameRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The identifier of the program to update the name of. Only the original
  // program creator can update the name unless authorized.
  bytes vk_hash = 2;
  // The name of the program. Must be unique.
  string name = 3;
}

message SetProgramNameResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetProgramNameResponseBody body = 2;
}

message SetProgramNameResponseBody {}

/****************
 *** Payments ***
 ***************/

message GetBalanceRequest {
  // The address of the account.
  bytes address = 1;
}

message GetBalanceResponse {
  // The amount of credits owned by the account.
  string amount = 1;
}

message BalanceLog {
  // The address of the account.
  bytes address = 1;
  // The type of balance change operation.
  BalanceOperation operation = 2;
  // The amount of the change (can be positive or negative).
  string amount = 3;
  // The transaction hash that caused this change.
  bytes tx_hash = 4;
  // The unix timestamp of when this change occurred.
  uint64 created_at = 5;
}

message GetFilteredBalanceLogsRequest {
  // The optional address to filter for.
  optional bytes address = 1;
  // The optional type of operations to filter for.
  optional BalanceOperation operation = 2;
  // The optional minimum unix timestamp to filter logs from. Only returns
  // logs after this timestamp.
  optional uint64 minimum_timestamp = 3;
  // The optional maximum unix timestamp to filter logs to. Only returns
  // logs before this timestamp.
  optional uint64 maximum_timestamp = 4;
  // The optional maximum number of logs to return (default is 10, maximum is 100).
  optional uint32 limit = 5;
  // The optional page number to return (default is 1).
  optional uint32 page = 6;
}

message GetFilteredBalanceLogsResponse {
  // The balance logs that matched the filter criteria.
  repeated BalanceLog logs = 1;
}
  
message AddCreditRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  AddCreditRequestBody body = 3;
}

message AddCreditRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The address of the account to add credits to.
  bytes address = 2;
  // The amount of credits to add.
  string amount = 3;
}

message AddCreditResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  AddCreditResponseBody body = 2;
}

message AddCreditResponseBody {}

message TransferRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  TransferRequestBody body = 3;
}

message TransferRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The address of the recipient account to transfer credits to.
  bytes to = 2;
  // The amount of credits to transfer.
  string amount = 3;
  // The domain of the request.
  bytes domain = 4;
  // The variant of the transaction.
  TransactionVariant variant = 5;
}

message TransferResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  TransferResponseBody body = 2;
}

message TransferResponseBody {}

message GetLatestBridgeBlockRequest {
  // The chain ID of the bridge.
  uint32 chain_id = 1;
}

message GetLatestBridgeBlockResponse {
  // The latest processed block in the bridge.
  uint64 block_number = 1;
}

message GetGasPriceEstimateRequest {
  FulfillmentStrategy strategy = 1;
}

message GetGasPriceEstimateResponse {
  uint64 gas_price = 1;
}

message GetTransactionDetailsRequest {
  // The transaction hash.
  bytes tx_hash = 1;
}

message TransactionDetails {
  bytes tx_hash = 1;
  bytes sender = 2;
  bytes signature = 3;
  uint64 nonce = 4;
  uint64 created_at = 5;
  optional string name = 6;
  optional bytes request_id = 7;
}

message GetTransactionDetailsResponse {
  TransactionDetails transaction = 1;
}

message AddReservedChargeRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  AddReservedChargeRequestBody body = 3;
}

message AddReservedChargeRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The type of charge.
  ChargeType charge_type = 2;
  // The quantity of the charge.
  string quantity = 3;
  // The unix timestamp of the charge start time.
  uint64 start_time = 4;
  // The unix timestamp of the charge end time.
  uint64 end_time = 5;
  // The address of the fulfiller.
  bytes fulfiller = 6;
}

message AddReservedChargeResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  AddReservedChargeResponseBody body = 2;
}

message AddReservedChargeResponseBody {}

 message ChargeDetails {
  // The identifier for the charge.
  uint64 charge_id = 1;
  // The transaction hash of the charge.
  bytes tx_hash = 2;
  // The type of charge.
  ChargeType charge_type = 3;
  // The quantity of the charge.
  string quantity = 4;
  // The effective price of the charge in USDC.
  string effective_price = 5;
  // Whether the charge is instant or not.
  bool is_instant = 6;
  // The address of the fulfiller the charge is associated with.
  bytes fulfiller = 7;
  // The optional request ID associated with an instant charge.
  optional bytes request_id = 8;
  // The optional unix timestamp of a non-instant charge start time.
  optional uint64 start_time = 9;
  // The optional unix timestamp of a non-instant charge end time.
  optional uint64 end_time = 10;
  // The unix timestamp of when the charge was created.
  uint64 created_at = 11;
}

message ChargeSummary {
  // The type of charge.
  ChargeType charge_type = 1;
  // The total prorated amount.
  string amount = 2;
}

message ClusterBillingSummary {
  // The address of the fulfiller.
  bytes fulfiller = 1;
  // The optional name to refer to an alias of the fulfiller address.
  optional string fulfiller_name = 2;
  // The details of each active reserved charge.
  repeated ChargeDetails reserved_charges_details = 3;
  // The summary of each reserved charge type associated with this fulfiller.
  repeated ChargeSummary reserved_charges = 4;
  // The summary of each instant charge type associated with this fulfiller.
  repeated ChargeSummary instant_charges = 5;
}

message PayerBillingSummary {
  // The month, formatted as "mm/yyyy".
  string month = 1;
  // The sum of all instant charges and prorated reserved charges for the month.
  string total = 2;
  // The clusters with a billing summary for the month.
  repeated ClusterBillingSummary clusters = 3;
}

message GetBillingSummaryRequest {
  // The optional starting month to filter from (inclusive), formatted as "mm/yyyy".
  optional string from_month = 1;
  // The optional ending month to filter to (inclusive), formatted as "mm/yyyy".
  optional string to_month = 2;
  // The optional maximum number of months to return per page (default is 3, max is 10).
  optional uint32 limit = 3;
  // The optional page number to return (default is 1).
  optional uint32 page = 4;
  // The payer to filter for.
  bytes payer = 5;
}

message GetBillingSummaryResponse {
  // A list summarizing charges by month and clusters for the specified payer.
  repeated PayerBillingSummary billing_summary = 1;
}

message Price {
  // The address of the fulfiller the price is for.
  bytes fulfiller = 1;
  // The type of charge the price is for.
  ChargeType charge_type = 2;
  // The price of the charge type in USDC.
  string price = 3;
  // Whether the price is the default price.
  bool is_default = 4;
  // The optional note associated with the price.
  optional string note = 5;
  // The unix timestamp of when the price was created.
  uint64 created_at = 6;
}

message Cluster {
  // The address of the fulfiller.
  bytes fulfiller = 1;
  // The address of the payer.
  bytes payer = 2;
  // The optional name to refer to an alias of the fulfiller address.
  optional string fulfiller_name = 3;
  // The optional name to refer to an alias of the payer address.
  optional string payer_name = 4;
  // The unix timestamp of when the fulfiller was created.
  uint64 created_at = 5;
  // The current prices for all charge types in this reservation.
  repeated Price prices = 6;
}

message GetFilteredClustersRequest {
  // The optional fulfiller address to filter for.
  optional bytes fulfiller = 1;
  // The optional payer address to filter for.
  optional bytes payer = 2;
  // The optional maximum number of clusters to return (default is 10,
  // maximum is 100).
  optional uint32 limit = 3;
  // The optional page number to return (default is 1).
  optional uint32 page = 4;
}

message GetFilteredClustersResponse {
  // The clusters that matched the filter criteria.
  repeated Cluster clusters = 1;
}

message UpdatePriceRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  UpdatePriceRequestBody body = 3;
}

message UpdatePriceRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The address of the fulfiller the price is for.
  bytes fulfiller = 2;
  // The type of charge to update the price for.
  ChargeType charge_type = 3;
  // The price to update to.
  string price = 4;
  // The optional note for the price.
  optional string note = 5;
}

message UpdatePriceResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  UpdatePriceResponseBody body = 2;
}

message UpdatePriceResponseBody {}

message UsageSummary {
  // The total amount of gas (reserved + on-demand).
  string total_gas = 1;
  // The total amount of reserved gas.
  string reserved_gas = 2;
  // The total amount of on-demand gas.
  string on_demand_gas = 3;
}

message ClusterUsageSummary {
  // The address of the fulfiller.
  bytes fulfiller = 1;
  // The optional name to refer to an alias of the fulfiller address.
  optional string fulfiller_name = 2;
  // The usage summary associated with this fulfiller.
  UsageSummary usage_summary = 3;
}

message PayerUsageSummary {
  // The month, formatted as "mm/yyyy".
  string month = 1;
  // The sum of all reserved and on-demand gas for the month.
  string total_gas = 2;
  // The sum of all reserved gas for the month.
  string total_reserved_gas = 3;
  // The sum of all on-demand gas for the month.
  string total_on_demand_gas = 4;
  // The clusters with a usage summary for the month.
  repeated ClusterUsageSummary clusters = 5;
}

message GetUsageSummaryRequest {
  // The optional starting month to filter from (inclusive), formatted as "mm/yyyy".
  optional string from_month = 1;
  // The optional ending month to filter to (inclusive), formatted as "mm/yyyy".
  optional string to_month = 2;
  // The optional maximum number of months to return per page (default is 3, max is 12).
  optional uint32 limit = 3;
  // The optional page number to return (default is 1).
  optional uint32 page = 4;
  // The optional payer to filter for.
  optional bytes payer = 5;
}

message GetUsageSummaryResponse {
  // A list summarizing usage by month and clusters for the specified payer.
  repeated PayerUsageSummary usage_summary = 1;
}

/********************
 *** Reservations ***
 ********************/

message Reservation {
  // The address of the requester.
  bytes requester = 1;
  // The address of the fulfiller.
  bytes fulfiller = 2;
  // The optional name to refer to an alias of the requester address.
  optional string requester_name = 3;
  // The optional name to refer to an alias of the fulfiller address.
  optional string fulfiller_name = 4;
  // The unix timestamp of when the reservation was created.
  uint64 created_at = 5;
}

message GetFilteredReservationsRequest {
  // Requester address to filter for.
  optional bytes requester = 1;
  // The optional maximum number of reservations to return (default is 10,
  // maximum is 100).
  optional uint32 limit = 2;
  // The optional page number to return (default is 1).
  optional uint32 page = 3;
}

message GetFilteredReservationsResponse {
  // The reservations that matched the filter criteria.
  repeated Reservation reservations = 1;
}

message AddReservationRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  AddReservationRequestBody body = 3;
}

message AddReservationRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The address of the requester to add reservation for.
  bytes requester = 2;
  // The address of the fulfiller to reserve.
  bytes fulfiller = 3;
}

message AddReservationResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  AddReservationResponseBody body = 2;
}

message AddReservationResponseBody {}

message RemoveReservationRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  RemoveReservationRequestBody body = 3;
}

message RemoveReservationRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The address of the requester to remove reservation for.
  bytes requester = 2;
}

message RemoveReservationResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  RemoveReservationResponseBody body = 2;
}

message RemoveReservationResponseBody {}


/*****************
 *** Auctions ***
 *****************/

message BidRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  BidRequestBody body = 3;
}

message BidRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The request ID to bid on.
  bytes request_id = 2;
  // The amount to bid.
  string amount = 3;
  // The domain separator for the request.
  bytes domain = 4;
  // The address of the prover.
  bytes prover = 5;
  // The variant of the transaction.
  TransactionVariant variant = 6;
}

message BidResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  BidResponseBody body = 2;
}

message BidResponseBody {}

message SettleRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SettleRequestBody body = 3;
}

message SettleRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The request ID to settle bids for.
  bytes request_id = 2;
  // The winner of the auction.
  bytes winner = 3;
  // The domain separator for the request.
  bytes domain = 4;
  // The variant of the transaction.
  TransactionVariant variant = 5;
}

message SettleResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SettleResponseBody body = 2;
}

message GetProversByUptimeRequest {}

message GetProversByUptimeResponse {
  // The provers that have historically had reliable uptime.
  repeated bytes provers = 1;
}

message SettleResponseBody {}

/*******************
 *** Leaderboard ***
 *******************/

message Claims {
  // The subject of the JWT.
  bytes sub = 1;
  // The expiration time of the JWT.
  uint64 exp = 2;
}

message SignInRequest {
  // The signature of the sender.
  bytes signature = 1;
  // The SIWE message.
  string message = 2;
}

message SignInResponse {
  // The JSON Web Token (JWT) to use for authentication.
  string jwt = 1;
}

message GetOnboardedAccountsCountRequest {}

message GetOnboardedAccountsCountResponse {
  // The number of accounts that have been onboarded.
  uint64 count = 1;
}

message OnboardedAccount {
  // The address of the account.
  bytes address = 1;
  // The unix timestamp of when the account was onboarded.
  uint64 created_at = 2;
  // The optional name of the account.
  optional string name = 3;
  // The optional twitter handle of the account.
  optional string image = 4;
  // The optional invite code referrer of the account.
  optional string referrer = 5;
}

message GetFilteredOnboardedAccountsRequest {
  // The optional maximum number of entries to return (default is 10, maximum is 100).
  optional uint32 limit = 1;
  // The optional page number to return (default is 1).
  optional uint32 page = 2;
}

message GetFilteredOnboardedAccountsResponse {
  // The accounts that matched the filter criteria.
  repeated OnboardedAccount accounts = 1;
}

message LeaderboardRow {
  // The address of the account.
  bytes address = 1;
  // The rank of the account.
  uint64 rank = 2;
  // The optional name of the account.
  optional string name = 3;
  // The optional twitter handle of the account.
  optional string image = 4;
  // The optional invite code referrer of the account.
  optional string referrer = 5;
  // The number of requests.
  uint64 requests = 6;
  // The number of cycles.
  uint64 cycles = 7;
  // The number of redeemed stars.
  uint64 redeemed_stars = 8;
}

message LeaderboardRowWithExtraStars {
  // The address of the account.
  bytes address = 1;
  // The rank of the account.
  uint64 rank = 2;
  // The optional name of the account.
  optional string name = 3;
  // The optional twitter handle of the account.
  optional string image = 4;
  // The optional invite code referrer of the account.
  optional string referrer = 5;
  // The number of requests.
  uint64 requests = 6;
  // The number of cycles.
  uint64 cycles = 7;
  // The number of redeemed stars.
  uint64 redeemed_stars = 8;
  // The number of pending stars (total - redeemed).
  uint64 pending_stars = 9;
  // The number of referral stars (already counted in pending stars / redeemed stars).
  uint64 referral_stars = 10;
}

message GetLeaderboardRequest {
  // The optional maximum number of entries to return (default is 10, maximum is 100).
  optional uint32 limit = 1;
  // The optional page number to return (default is 1).
  optional uint32 page = 2;
}

message GetLeaderboardResponse {
  // The leaderboard entries.
  repeated LeaderboardRow leaderboard = 1;
}

message GetLeaderboardStatsRequest {
  // The address of the account.
  bytes address = 1;
}

message GetLeaderboardStatsResponse {
  // The leaderboard stats for the account.
  LeaderboardRowWithExtraStars stats = 1;
}

message ReferralCode {
  // The code.
  string code = 1;
  // The optional account's address that redeemed the code.
  optional bytes referred_account = 2;
  // The optional account's name that redeemed the code.
  optional string referred_name = 3;
  // The optional account's image that redeemed the code.
  optional string referred_image = 4;
  // The unix timestamp of when the code was created.
  uint64 created_at = 5;
}

message GetCodesRequest {
  // The account to get the codes for.
  bytes account = 1;
}

message GetCodesResponse {
  // The codes that the account has.
  repeated ReferralCode codes = 1;
}

message RedeemCodeRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  RedeemCodeRequestBody body = 3;
}

message RedeemCodeRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The code to redeem.
  string code = 2;
}

message RedeemCodeResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  RedeemCodeResponseBody body = 2;
}

message RedeemCodeResponseBody {}

message ConnectTwitterRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  ConnectTwitterRequestBody body = 3;
}

message ConnectTwitterRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The callback URI redirected to.
  string callback_uri = 2;
  // The code from Twitter.
  string code = 3;
  // The code verifier used in the initial Twitter request.
  string code_verifier = 4;
}

message ConnectTwitterResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  ConnectTwitterResponseBody body = 2;
}

message ConnectTwitterResponseBody {}

message CompleteOnboardingRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  CompleteOnboardingRequestBody body = 3;
}

message CompleteOnboardingRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
}

message CompleteOnboardingResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  CompleteOnboardingResponseBody body = 2;
}

message CompleteOnboardingResponseBody {}

message SetUseTwitterHandleRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetUseTwitterHandleRequestBody body = 3;
}

message SetUseTwitterHandleRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // Whether to display the Twitter handle.
  bool should_display = 2;
}

message SetUseTwitterHandleResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetUseTwitterHandleResponseBody body = 2;
} 

message SetUseTwitterHandleResponseBody {}

message SetUseTwitterImageRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetUseTwitterImageRequestBody body = 3;
} 

message SetUseTwitterImageRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // Whether to display the Twitter profile picture.
  bool should_display = 2;
}

message SetUseTwitterImageResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetUseTwitterImageResponseBody body = 2;
}

message SetUseTwitterImageResponseBody {}

message RequestRandomProofRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  RequestRandomProofRequestBody body = 3;
}

message RequestRandomProofRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
}

message RequestRandomProofResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  RequestRandomProofResponseBody body = 2;
}

message RequestRandomProofResponseBody {
  // The identifier for the request.
  bytes request_id = 1;
  // The name of the randomly selected program.
  string program_name = 2;
  // The number of bonus stars earned.
  uint64 stars = 3;
}

message SubmitCaptchaGameRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SubmitCaptchaGameRequestBody body = 3;
}

message SubmitCaptchaGameRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The list of integer answers for the captcha game.
  repeated int32 fake_images = 2;
}

message SubmitCaptchaGameResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SubmitCaptchaGameResponseBody body = 2;
}

message SubmitCaptchaGameResponseBody {
  // The number of correct answers submitted.
  uint32 correct_count = 1;
}


message RedeemStarsRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  RedeemStarsRequestBody body = 3;
}

message RedeemStarsRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
}

message RedeemStarsResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  RedeemStarsResponseBody body = 2;
}

message RedeemStarsResponseBody {
  // The base number of stars that were redeemed.
  uint64 base_stars = 1;
  // The multiplier that was applied.
  string multiplier = 2;
  // The final number of stars after applying the multiplier.
  uint64 final_stars = 3;
}

message GetFlappyLeaderboardRequest {
  // The optional maximum number of requests to return (default is 10,
  // maximum is 100).
  optional uint32 limit = 1;
  // The optional page number to return (default is 1).
  optional uint32 page = 2;
}

message FlappyBirdEntry {
  // The unique ID of the proof request.
  bytes request_id = 1;
  // The account that submitted the proof request.
  bytes sender = 2;
  // The number of cycles used.
  uint64 cycles = 3;
  // The player's score.
  uint64 score = 4;
  // The twitter username of the account.
  optional string twitter_handle = 5;
  // The twitter image of the account.
  optional string twitter_image = 6;
  // Whether the account wants to use their twitter handle to set their name.
  bool use_twitter_handle = 7;
  // Whether the account wants to use their twitter image to set their image.
  bool use_twitter_image = 8;
}

message GetFlappyLeaderboardResponse {
  // List of flappy bird leaderboard entries.
  repeated FlappyBirdEntry entries = 1;
}

message SetTurboHighScoreRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetTurboHighScoreRequestBody body = 3;
}

message SetTurboHighScoreRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The high score to set.
  uint64 high_score = 2;
}

message SetTurboHighScoreResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetTurboHighScoreResponseBody body = 2;
}

message SetTurboHighScoreResponseBody {}  

message SubmitQuizGameRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SubmitQuizGameRequestBody body = 3;
}

message SubmitQuizGameRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The list of integer answers for the quiz game.
  repeated int32 answers = 2;
}

message SubmitQuizGameResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SubmitQuizGameResponseBody body = 2;
}

message SubmitQuizGameResponseBody {
  // The number of correct answers submitted.
  uint32 correct_count = 1;
}

message GetTurboLeaderboardRequest {
  // The optional maximum number of requests to return (default is 10,
  // maximum is 100).
  optional uint32 limit = 1;
  // The optional page number to return (default is 1).
  optional uint32 page = 2;
}

message TurboLeaderboardEntry {
  // The account that submitted the proof request.
  bytes sender = 1;
  // The player's score.
  uint64 score = 2;
  // The twitter username of the account.
  optional string twitter_handle = 3;
  // The twitter image of the account.
  optional string twitter_image = 4;
  // Whether the account wants to use their twitter handle to set their name.
  bool use_twitter_handle = 5;
  // Whether the account wants to use their twitter image to set their image.
  bool use_twitter_image = 6;
}

message GetTurboLeaderboardResponse {
  // List of turbo leaderboard entries.
  repeated TurboLeaderboardEntry entries = 1;
}

message SubmitEthBlockMetadataRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SubmitEthBlockMetadataBody body = 3;
}

message SubmitEthBlockMetadataBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The request identifier for which this metadata is for.
  bytes request_id = 2;
  // The chain identifier.
  uint32 chain_id = 3;
  // The block hash.
  bytes hash = 4;
  // The block number.
  uint64 number = 5;
  // The block timestamp.
  uint64 timestamp = 6;
  // The block transaction count.
  uint64 tx_count = 7;
}

message SubmitEthBlockMetadataResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SubmitEthBlockMetadataResponseBody body = 2;
}

message SubmitEthBlockMetadataResponseBody {}

message Bid {
  // The address of the bidder.
  bytes bidder = 1;
  // The amount of the bid.
  string amount = 2;
}

message Bet {
  // The address of the bettor.
  bytes bettor = 1;
  // The amount of the bet.
  string amount = 2;
}


message EthBlockRequest {
  // The request identifier.
  bytes request_id = 1;
  // The verification key hash of the program.
  bytes vk_hash = 2;
  // The version of the prover to use.
  string version = 3;
  // The mode for the proof.
  ProofMode mode = 4;
  // The strategy for fulfiller assignment.
  FulfillmentStrategy strategy = 5;
  // The program resource identifier.
  string program_uri = 6;
  // The stdin resource identifier.
  string stdin_uri = 7;
  // The deadline for the request.
  uint64 deadline = 8;
  // The cycle limit for the request.
  uint64 cycle_limit = 9;
  // The gas price for the request.
  optional uint64 gas_price = 10;
  // The fulfillment status of the request.
  FulfillmentStatus fulfillment_status = 11;
  // The execution status of the request.
  ExecutionStatus execution_status = 12;
  // The requester address that signed the request.
  bytes requester = 13;
  // The fulfiller address that fulfilled the request.
  optional bytes fulfiller = 14;
  // The optional name to refer to an alias of the program id.
  optional string program_name = 15;
  // The optional name to refer to an alias of the requester address.
  optional string requester_name = 16;
  // The optional name to refer to an alias of the fulfiller address.
  optional string fulfiller_name = 17;
  // The unix timestamp of when the request was created.
  uint64 created_at = 18;
  // The unix timestamp of when the request was updated.
  uint64 updated_at = 19;
  // The unix timestamp of when the request was fulfilled. Only included if
  // the request has a fulfillment status of FULFILLED.
  optional uint64 fulfilled_at = 20;
  // The transaction hash of the request.
  bytes tx_hash = 21;
  // The cycle used during the execution of the request. Only included if the
  // request has an execution status of EXECUTED.
  optional uint64 cycles = 22;
  // The public values hash from the execution of the request. Only included if
  // the request has an execution status of EXECUTED.
  optional bytes public_values_hash = 23;
  // The amount deducted from the fulfiller's balance. Only included if the
  // request has a fulfillment status of ASSIGNED.
  optional string deduction_amount = 24;
  // The amount refunded to the fulfiller's balance. Only included if the
  // request has a fulfillment status of EXECUTED.
  optional string refund_amount = 25;
  // The chain id of the request.
  uint32 chain_id = 26;
  // The block hash of the request.
  bytes block_hash = 27;
  // The block number of the request.
  uint64 block_number = 28;
  // The block timestamp of the request.
  uint64 block_timestamp = 29;
  // The block transaction count of the request.
  uint64 block_tx_count = 30;
  // The bids for the request.
  repeated Bid bids = 31;
  // When the auction was settled.
  optional uint64 settled_at = 32;
  // The fulfiller social platform.
  optional SocialPlatform fulfiller_social_platform = 33;
  // The fulfiller social id.
  optional string fulfiller_social_id = 34;
  // The fulfiller social handle.
  optional string fulfiller_social_handle = 35;
  // The fulfiller social image.
  optional string fulfiller_social_image = 36;
  // The bets for the request.
  repeated BettorDetails bets = 37;
  // The public program resource identifier.
  string program_public_uri = 38;
  // The public stdin resource identifier.
  string stdin_public_uri = 39;
}

message GetFilteredEthBlockRequestsRequest {
  // The optional version of the requests to filter for.
  optional string version = 1;
  // The optional fulfillment status of the requests to filter for.
  optional FulfillmentStatus fulfillment_status = 2;
  // The optional execution status of the requests to filter for.
  optional ExecutionStatus execution_status = 3;
  // The optional minimum unix timestamp deadline of the requests to filter for.
  // Only returns requests with deadlines after this timestamp.
  optional uint64 minimum_deadline = 4;
  // The optional verification key hash of the program to filter for.
  optional bytes vk_hash = 5;
  // The optional requester address to filter for.
  optional bytes requester = 6;
  // The optional fulfiller address to filter for.
  optional bytes fulfiller = 7;
  // The optional minimum creation unix timestamp of the requests to filter for.
  optional uint64 from = 8;
  // The optional maximum creation unix timestamp of the requests to filter for.
  optional uint64 to = 9;
  // The optional maximum number of requests to return (default is 10,
  // maximum is 100).
  optional uint32 limit = 10;
  // The optional page number to return (default is 1).
  optional uint32 page = 11;
  // The optional mode of the requests to filter for.
  optional ProofMode mode = 12;
  // The optional bidder address to filter out. Only returns requests that
  // have not been bid by this address.
  optional bytes not_bid_by = 13;
}

message GetFilteredEthBlockRequestsResponse {
  // The list of filtered requests.
  repeated EthBlockRequest requests = 1;
}

message Set2048HighScoreRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  Set2048HighScoreRequestBody body = 3;
}

message Set2048HighScoreRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The high score to set.
  uint64 high_score = 2;
}

message Set2048HighScoreResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  Set2048HighScoreResponseBody body = 2;
}

message Set2048HighScoreResponseBody {}

enum VolleyballDifficulty {
  EASY = 0;
  MEDIUM = 1;
  HARD = 2;
  TROLL = 3;
}

message SetVolleyballHighScoreRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetVolleyballHighScoreRequestBody body = 3;
}

message SetVolleyballHighScoreRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The high score to set.
  uint64 high_score = 2;
  // The difficulty of the game.
  VolleyballDifficulty difficulty = 3;
}

message SetVolleyballHighScoreResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetVolleyballHighScoreResponseBody body = 2;
}

message SetVolleyballHighScoreResponseBody {}

message SetTurboTimeTrialHighScoreRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetTurboTimeTrialHighScoreRequestBody body = 3;
}   

message SetTurboTimeTrialHighScoreRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The high score to set.
  uint64 high_score = 2;
  // The best rate to set.
  float best_rate = 3;
} 

message SetTurboTimeTrialHighScoreResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetTurboTimeTrialHighScoreResponseBody body = 2;
}   

message SetTurboTimeTrialHighScoreResponseBody {}

message SetCoinCrazeHighScoreRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetCoinCrazeHighScoreRequestBody body = 3;  
}

message SetCoinCrazeHighScoreRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The high score to set.
  uint64 high_score = 2;
}

message SetCoinCrazeHighScoreResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetCoinCrazeHighScoreResponseBody body = 2;
}

message SetCoinCrazeHighScoreResponseBody {}

message SetLeanHighScoreRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetLeanHighScoreRequestBody body = 3;
} 

message SetLeanHighScoreRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The high score to set.
  uint64 high_score = 2;
}    

message SetLeanHighScoreResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetLeanHighScoreResponseBody body = 2;
} 

message SetLeanHighScoreResponseBody {} 

message SetFlowHighScoreRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetFlowHighScoreRequestBody body = 3;
}

message SetFlowHighScoreRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1; 
  // The high score to set.
  uint64 high_score = 2;
}

message SetFlowHighScoreResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetFlowHighScoreResponseBody body = 2;
}

message SetFlowHighScoreResponseBody {}

message SetRollupHighScoreRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetRollupHighScoreRequestBody body = 3;
} 

message SetRollupHighScoreRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The high score to set.
  uint64 high_score = 2;
  // The victory status for the game.
  bool is_victory = 3;
}

message SetRollupHighScoreResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetRollupHighScoreResponseBody body = 2;
} 

message SetRollupHighScoreResponseBody {}

message GetPendingStarsRequest {
  // The address of the account.
  bytes address = 1;
}

message GetPendingStarsResponse {
  // The pending stars for the account.
  uint64 pending_stars = 1;
}

/***********
 *** Gpu ***
 ***********/

message SocialIdentity {
  // The social platform.
  SocialPlatform platform = 1;
  // The social handle to check.
  string handle = 2;
}

message GetWhitelistStatusRequest {
  oneof identifier {
    // The ethereum address to check.
    bytes address = 1;
    // The social identity to check.
    SocialIdentity social_identity = 2;
  }
}

message GetWhitelistStatusResponse {
  // Whether the user is whitelisted.
  bool is_whitelisted = 1;
}

message ClaimGpuRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  ClaimGpuRequestBody body = 3;
}

message ClaimGpuRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The ethereum address to delegate to.
  bytes delegate = 2;
  // The gpu variant.
  GpuVariant variant = 3;
}

message ClaimGpuResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  ClaimGpuResponseBody body = 2;
}

message ClaimGpuResponseBody {}

message SetGpuVariantRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetGpuVariantRequestBody body = 3;
}

message SetGpuVariantRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The gpu variant.
  GpuVariant variant = 2;
}

message SetGpuVariantResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetGpuVariantResponseBody body = 2;
}

message SetGpuVariantResponseBody {}

message LinkWhitelistedTwitterRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  LinkWhitelistedTwitterRequestBody body = 3;
}

message LinkWhitelistedTwitterRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The callback URI redirected to.
  string callback_uri = 2;
  // The code from Twitter.
  string code = 3;
  // The code verifier used in the initial Twitter request.
  string code_verifier = 4;
}

message LinkWhitelistedTwitterResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  LinkWhitelistedTwitterResponseBody body = 2;
}

message LinkWhitelistedTwitterResponseBody {}

message RetrieveProvingKeyRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  RetrieveProvingKeyRequestBody body = 3;
}

message RetrieveProvingKeyRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
}

message RetrieveProvingKeyResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  RetrieveProvingKeyResponseBody body = 2;
}

message RetrieveProvingKeyResponseBody {
  // The proving key.
  bytes proving_key = 1;
}

message LinkWhitelistedGithubRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  LinkWhitelistedGithubRequestBody body = 3;
}

message LinkWhitelistedGithubRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The callback URI redirected to.
  string callback_uri = 2;
  // The code from GitHub.
  string code = 3;
}

message LinkWhitelistedGithubResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  LinkWhitelistedGithubResponseBody body = 2;
}

message LinkWhitelistedGithubResponseBody {}

message LinkWhitelistedDiscordRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  LinkWhitelistedDiscordRequestBody body = 3;
}

message LinkWhitelistedDiscordRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The callback URI redirected to.
  string callback_uri = 2;
  // The code from Discord.
  string code = 3;
}

message LinkWhitelistedDiscordResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  LinkWhitelistedDiscordResponseBody body = 2;
}

message LinkWhitelistedDiscordResponseBody {}

message ProverEntry {
  // The social platform.
  optional SocialPlatform social_platform = 1;
  // The social handle.
  optional string social_handle = 2;
  // The social id.
  optional string social_id = 3;
  // The social image.
  optional string social_image = 4;
  // The gpu variant.
  GpuVariant gpu_variant = 5;
  // The ethereum address of the gpu owner;
  bytes owner = 6;
  // The ethereum address of the gpu delegate;
  bytes delegate = 7;
  // The total number of proofs.
  uint64 total_proofs = 8;
  // The total number of cycles.
  uint64 total_cycles = 9;
  // The optional gpu coordinates.
  optional string gpu_coordinates = 10;
  // The total number of points;
  uint64 total_points = 11;
  // The total number of stars.
  uint64 total_stars = 12;
}

message GetEthBlockRequestMetricsRequest {
  // The optional version of the requests to filter for.
  optional string version = 1;
  // The optional verification key hash of the program to filter for.
  optional bytes vk_hash = 2;
  // The optional execution status of the requests to filter for.
  optional ExecutionStatus execution_status = 3;
  // The optional fulfillment status of the requests to filter for.
  optional FulfillmentStatus fulfillment_status = 4;
  // The optional requester address to filter for.
  optional bytes requester = 5;
  // The optional fulfiller address to filter for.
  optional bytes fulfiller = 6;
  // The optional mode of the requests to filter for.
  optional ProofMode mode = 7;
  // The optional minimum creation unix timestamp of the requests to filter for.
  optional uint64 from = 8;
  // The optional maximum creation unix timestamp of the requests to filter for.
  optional uint64 to = 9;
  // The optional bidder address to filter out. Only returns requests that
  // have not been bid by this address.
  optional bytes not_bid_by = 10;
}

message GetEthBlockRequestMetricsResponse {
  // The total number of requests.
  uint64 total_requests = 1;
  // The total number of cycles.
  uint64 total_cycles = 2;
  // The total number of bids.
  uint64 total_bids = 3;
  // The total number of bets.
  uint64 total_bets = 4;
}

message GetProverLeaderboardRequest {
  // The optional maximum number of requests to return (default is 10,
  // maximum is 100).
  optional uint32 limit = 1;
  // The optional page number to return (default is 1).
  optional uint32 page = 2;
  // The optional gpu variant to filter by.
  optional GpuVariant gpu_variant = 3;
}

message GetProverLeaderboardResponse {
  // List of prover leaderboard entries.
  repeated ProverEntry entries = 1;
}

message Gpu {
  // The address of the gpu owner.
  bytes owner = 1;
  // The address of the gpu delegate.
  bytes delegate = 2;
  // The gpu variant.
  GpuVariant gpu_variant = 3;
  // The unix timestamp of when the gpu was created.
  uint64 created_at = 4;
  // The optional social platform of the gpu owner.
  optional SocialPlatform social_platform = 5;
  // The optional social handle of the gpu owner.
  optional string social_handle = 6;
  // The optional social id of the gpu owner.
  optional string social_id = 7;
  // The social image of the gpu owner.
  optional string social_image = 8;
}

message GetFilteredGpusRequest {
  // The optional maximum number of entries to return (default is 10, maximum is 100).
  optional uint32 limit = 1;
  // The optional page number to return (default is 1).
  optional uint32 page = 2;
}

message GetFilteredGpusResponse {
  // The gpus that matched the filter criteria.
  repeated Gpu gpus = 1;
}

message SetGpuCoordinatesRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetGpuCoordinatesRequestBody body = 3;
}

message SetGpuCoordinatesRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The gpu longitude coordinate.
  string longitude = 2;
  // The gpu latitude coordinate.
  string latitude = 3;
}

message SetGpuCoordinatesResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  SetGpuCoordinatesResponseBody body = 2;
}

message SetGpuCoordinatesResponseBody {}

message UpgradeDetails {
  // The type of upgrade.
  Upgrade upgrade = 1;
  // The amount of times the upgrade has been purchased.
  uint32 count = 2;
  // The base cost of the upgrade.
  string base_cost = 3;
  // The cost to purchase the next upgrade level.
  string next_level_cost = 4;
  // The upgrade amount;
  string amount = 5;
  // The max level allowed for the upgrade.
  uint32 max_level = 6;
}

message GetPointsRequest {
  // The address of the account to get points for.
  bytes owner = 1;
}

message GetPointsResponse {
  // Deprecated.
  reserved 1;
  // The amount of points owned by the account.
  string points_from_rate = 2;
  // The amount of points owned by the account.
  string total_points = 3;
  // The owner's current earn rate.
  string earn_rate = 4;
  // The owner's current click value.
  string click_value = 5;
  // The owner's maximum clicks allowed per period.
  uint32 max_clicks_per_period = 6;
  // The owner's amount of clicks in the current period.
  uint32 clicks_current_period = 7;
  // The unix timestamp of when click period resets.
  uint64 clicks_reset_date = 8;
  // The unix timestamp of the last time clicks were processed.
  uint64 last_click_date = 9;
  // Whether the owner is in overclocked state for the current period.
  bool overclocked = 10;
  // Detailed information about each upgrade.
  repeated UpgradeDetails upgrades = 11;
}

message ProcessClicksRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  ProcessClicksRequestBody body = 3;
}

message ProcessClicksRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The number of clicks to process.
  uint32 clicks = 2;
}

message ProcessClicksResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  ProcessClicksResponseBody body = 2;
}

message ProcessClicksResponseBody {}

message PurchaseUpgradeRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  PurchaseUpgradeRequestBody body = 3;
}

message PurchaseUpgradeRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The upgrade to purchase.
  Upgrade upgrade = 2;
}

message PurchaseUpgradeResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  PurchaseUpgradeResponseBody body = 2;
}

message PurchaseUpgradeResponseBody {}

message BetRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  BetRequestBody body = 3;
}

message BetRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The amount to bet.
  string amount = 2;
  // The identifier for the request.
  bytes request_id = 3;
}

message BetResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  BetResponseBody body = 2;
}

message BetResponseBody {
  // Deprecated.
  reserved 1;
  // Deprecated.
  reserved 2;
}

message BettorDetails {
  // The address of the bettor.
  bytes bettor = 1;
  // The amount of the bet.
  string amount = 2;
  // The probability of the bettor winning.
  string probability = 3;
  // The optional social platform of the bettor.
  optional SocialPlatform social_platform = 4;
  // The optional social handle of the bettor.
  optional string social_handle = 5;
  // The optional social id of the bettor.
  optional string social_id = 6;
  // The social image of the bettor.
  optional string social_image = 7;
  // The gpu variant of the bettor.
  optional GpuVariant gpu_variant = 8;
}

message GetContestDetailsRequest {
  // The identifier for the request.
  bytes request_id = 1;
}

message GetContestDetailsResponse {
  // The block number of the request.
  uint64 block_number = 1;
  // The execution status of the request.
  ExecutionStatus execution_status = 2;
  // The fulfillment status of the request.
  FulfillmentStatus fulfillment_status = 3;
  // The credits reward amount.
  string credits_reward = 4;
  // The points reward amount.
  string points_reward = 5;
  // Detailed information about the winner.
  BettorDetails winner = 6;
  // Detailed information about each loser.
  repeated BettorDetails losers = 11;
  // The stars reward amount.
  string stars_reward = 12;
  // The base stars amount.
  string base_stars = 13;
  // The multiplier amount.
  string multiplier = 14;
  // The total amount of bets in the contest.
  string total_bets = 15;
}

message ContestRequestDetails { 
  // The latest contest id.
  optional bytes request_id = 1;
  // The latest contest creation time.
  optional uint64 created_at = 2;
}

message GetLatestContestRequest {}

message GetLatestContestResponse {
  // The latest contest id.
  ContestRequestDetails new_contest = 1;
  // The current contest id.
  ContestRequestDetails current_contest = 2;
} 

message GetContestBettorsRequest {
  // The identifier for the request.
  bytes request_id = 1;
}

message GetContestBettorsResponse { 
  // The bettors.
  repeated BettorDetails bettors = 1;
  // The total pool of the contest.
  string total_pool = 2;
}

message GetGpuMetricsRequest {}

message GetGpuMetricsResponse {
  // The total number of gpus.
  uint32 total_gpus = 1;
  // The total number of proofs by gpus.
  uint32 total_proofs = 2;
}

message ProverActivity {
  // The request id.
  bytes request_id = 1;
  // The fulfillment status of the request.
  FulfillmentStatus fulfillment_status = 2;
  // The fulfiller address.
  bytes fulfiller = 3;
  // The optional social platform of the fulfiller.
  optional SocialPlatform fulfiller_social_platform = 4;
  // The optional social handle of the fulfiller.
  optional string fulfiller_social_handle = 5;
  // The optional social id of the fulfiller.
  optional string fulfiller_social_id = 6;
  // The social image of the fulfiller.
  optional string fulfiller_social_image = 7; 
  // The creation time of the request.
  optional uint64 created_at = 8;
  // The total number of bets placed for this proof.
  uint64 total_bets = 9;
}

message GetFilteredProverActivityRequest {
  // The limit for the number of results.
  optional uint32 limit = 1;
  // The page for the results.
  optional uint32 page = 2;
  // The optional address to filter by.
  optional bytes address = 3;
}

message GetFilteredProverActivityResponse {
  // The prover activity.
  repeated ProverActivity prover_activity = 1;
}

message GetProverMetricsRequest {
  // The address to filter by.
  bytes address = 1;
}

message GetProverMetricsResponse {
  // The total number of proofs.
  uint32 total_proofs = 1;
  // Number of contests participated in.
  uint32 total_contests = 2;
  // Stars earned.
  string stars_earned = 3;
  // Average multiplier.
  string average_multiplier = 4;
}

message BetHistory {
  // The request id.
  bytes request_id = 1; 
  // Points bet.
  string points_bet = 2;
  // Stars pool.
  string star_pool = 3;
  // Multiplier.
  string multiplier = 4;
  // Probability.
  string probability = 5;
  // Stars reward.
  string star_reward = 6;
  // The winner.
  BettorDetails winner = 7; 
  // The creation time of the bet.
  uint64 created_at = 8;
  // The total number of bettors.
  uint32 total_bettors = 9;
}

message GetFilteredBetHistoryRequest {
  // The address to filter by.
  bytes address = 1;
  // The limit for the number of results.
  optional uint32 limit = 2;
  // The page for the results.
  optional uint32 page = 3;
  // Filter by victory.
  optional bool is_victory = 4;
} 

message GetFilteredBetHistoryResponse {
  // The bet history.
  repeated BetHistory bets = 1;
}

message GpuTeamStats {
  // The gpu variant.
  GpuVariant gpu_variant = 1;
  // The total number of gpus.
  uint32 total_gpus = 2;
  // The total number of proofs.
  uint32 total_proofs = 3;
  // The total number of contests.
  uint32 total_contests = 4;
  // The total number of stars won by the gpu team.
  string total_stars_won = 5;
}

message GetGpuTeamStatsRequest {}

message GetGpuTeamStatsResponse {
  // List of gpu team stats.
  repeated GpuTeamStats gpu_team_stats = 1;
}

message GetConfigValuesRequest {}

message GetConfigValuesResponse {
  // The config values.
  ConfigValues config_values = 1;
}

message ConfigValues {
  // The disable bets flag.
  bool disable_bets = 1;
  // The disable leaderboard flag.
  bool disable_leaderboard = 2;
  // The disable leaderboard stats flag.
  bool disable_leaderboard_stats = 3;
  // The disable explorer trends flag.
  bool disable_explorer_trends = 4;
  // The disable pending stars flag.
  bool disable_pending_stars = 5;
}

/***************
 *** Provers ***
 ***************/

message GetProverStatsRequest {
  optional bytes address = 1;
}

message GetProverStatsResponse {
  string total_earnings = 1;
  string total_cycles = 2;
  string total_gas_proved = 3;
  string active_provers = 4;
}

message ProverStats {
  bytes address = 1;
  optional string name = 2;
  // Deprecated.
  reserved 3;
  // Deprecated.
  reserved 4;
  uint64 total_auction_requests = 5;
  uint64 successful_requests = 6;
  string total_gas_proved = 7;
  uint64 last_active_at = 8;
  uint64 created_at = 9;  
  string total_earnings = 10;
  bytes owner = 11;
  uint64 block_number = 12;
  bytes tx_hash = 13;
  string lifetime_rewards = 14;
  optional string image_url = 15;
  optional string ip_address = 16;
}

message GetFilteredProverStatsRequest {
  // The optional maximum number of requests to return (default is 10,
  // maximum is 100).
  optional uint32 limit = 1;
  // The optional page number to return (default is 1).
  optional uint32 page = 2;
  // Whether to include featured provers.
  optional bool is_featured = 3;
  // Whether to include whitelisted provers.
  optional bool is_whitelisted = 4;
  // Whether to show featured provers first in sorting.
  optional bool featured_first = 5;
  // Whether to show whitelisted provers first in sorting.
  optional bool whitelisted_first = 6;
  // Optional search query to filter by prover name or address.
  optional string search = 7;
}

message GetFilteredProverStatsResponse {
  repeated ProverStats stats = 1;
}

message GetProverSearchResultsRequest {
  // The query to search for.
  string query = 1;
} 

message GetProverSearchResultsResponse {
  repeated SearchResult provers = 1;
}

message BidHistory {
  // The bidder.
  bytes bidder = 1;
  // The amount bid.
  string amount = 2;
  // The creation time of the bid.
  uint64 created_at = 3;
  // The bidder name.
  optional string bidder_name = 4;
}

message GetFilteredBidHistoryRequest {
  // The request id to filter by.
  bytes request_id = 1;
  // The limit for the number of results.
  optional uint32 limit = 2;
  // The page for the results.
  optional uint32 page = 3;
  // Whether to show the winner first in sorting.
  optional bool winner_first = 4;
}

message GetFilteredBidHistoryResponse {
  repeated BidHistory bids = 1;
}

message GetProverStatsDetailRequest {
  // The prover address to get stats for.
  bytes address = 1;
}

message GetProverStatsDetailResponse {
  // The prover stats.
  ProverStats stats = 1;
}
 
/******************
 *** Settlement ***
 ******************/

message SignedMessage {
  // The message.
  string message = 1;
  // The signature.
  string signature = 2;
}

message SettlementRequest {
  // The RequestProofRequest signed message.
  optional SignedMessage request = 1;
  // The BidRequest signed message.
  optional SignedMessage bid = 2;
  // The SettleRequest signed message.
  optional SignedMessage settle = 3;
  // The ExecuteProofRequest signed message.
  optional SignedMessage execute = 4;
  // The FulfillProofRequest signed message.
  optional SignedMessage fulfill = 5;
}

message GetSettlementRequestRequest {
  // The request ID to get signed messages for.
  bytes request_id = 1;
}

message GetSettlementRequestResponse {
  // The settlement request.
  SettlementRequest request = 1;
}

message GetFilteredSettlementRequestsRequest {
  // The list of request IDs to get signed messages for.
  repeated bytes request_ids = 1;
}

message GetFilteredSettlementRequestsResponse {
  // The list of signed messages.
  repeated SettlementRequest requests = 1;
}

/***************
 *** Staking ***
 ***************/

 message Prover {
  // The address of the prover.
  bytes address = 1;
  // The owner of the prover.
  bytes owner = 2;
  // The name of the prover.
  optional string name = 3;
  // The block number of the prover was created in.
  uint64 block_number = 4;
  // The transaction hash of the prover was created in.
  bytes tx_hash = 5;
  // The staker fee in bips.
  string staker_fee_bips = 6;
 }

 message GetFilteredProversRequest {
  // The optional maximum number of provers to return (default is 10,
  // maximum is 100).
  optional uint32 limit = 1;
  // The optional page number to return (default is 1).
  optional uint32 page = 2;
}

message GetFilteredProversResponse {
  repeated Prover provers = 1;
}

message GetStakerStakeBalanceRequest {
  // The account to get the stake balance for. This can be a prover or the owner of the prover.
  bytes address = 1;
}

message GetStakerStakeBalanceResponse {
  // The stake balance.
  string amount = 1;
}

message GetProverStakeBalanceRequest {
  // The address of the prover.
  bytes prover = 1;
}

message GetProverStakeBalanceResponse {
  // The stake balance.
  string amount = 1;
}

message StakeBalanceLog {
  // The address of the account.
  bytes address = 1;
  // The type of balance change operation.
  StakeBalanceOperation operation = 2;
  // The amount of the change (can be positive or negative).
  string amount = 3;
  // The transaction hash that caused this change.
  bytes tx_hash = 4;
  // The unix timestamp of when this change occurred.
  uint64 created_at = 5;
}

message GetFilteredStakerStakeBalanceLogsRequest {
  // The optional staker address to filter for.
  optional bytes address = 1;
  // The optional type of operations to filter for.
  optional StakeBalanceOperation operation = 2;
  // The optional minimum unix timestamp to filter logs from. Only returns
  // logs after this timestamp.
  optional uint64 minimum_timestamp = 3;
  // The optional maximum unix timestamp to filter logs to. Only returns
  // logs before this timestamp.
  optional uint64 maximum_timestamp = 4;
  // The optional maximum number of logs to return (default is 10, maximum is 100).
  optional uint32 limit = 5;
  // The optional page number to return (default is 1).
  optional uint32 page = 6;
}

message GetFilteredStakerStakeBalanceLogsResponse {
  // The staker balance logs.
  repeated StakeBalanceLog logs = 1;
}

message GetFilteredProverStakeBalanceLogsRequest {
  // The optional prover address to filter for.
  optional bytes address = 1;
  // The optional type of operations to filter for.
  optional StakeBalanceOperation operation = 2;
  // The optional minimum unix timestamp to filter logs from. Only returns
  // logs after this timestamp.
  optional uint64 minimum_timestamp = 3;
  // The optional maximum unix timestamp to filter logs to. Only returns
  // logs before this timestamp.
  optional uint64 maximum_timestamp = 4;
  // The optional maximum number of logs to return (default is 10, maximum is 100).
  optional uint32 limit = 5;
  // The optional page number to return (default is 1).
  optional uint32 page = 6;
}

message GetFilteredProverStakeBalanceLogsResponse {
  // The prover balance logs.
  repeated StakeBalanceLog logs = 1;
}

message SetDelegationRequest {
  // The message format of the body.
  MessageFormat format = 1;
  // The signature of the sender.
  bytes signature = 2;
  // The body of the request.
  SetDelegationRequestBody body = 3;
}

message SetDelegationRequestBody {
  // The nonce of the request.
  uint64 nonce = 1;
  // The delegate address to set.
  bytes delegate = 2;
  // The prover address that the delegation applies to.
  bytes prover = 3;
  // The domain of the request.
  bytes domain = 4;
  // The variant of the transaction.
  TransactionVariant variant = 5;
  // The auctioneer address that will receive the fee.
  bytes auctioneer = 6;
  // The fee to pay for the delegation operation.
  string fee = 7;
}

message SetDelegationResponse {}

message GetDelegationRequest { 
  // The prover address to get the delegation for.
  bytes prover = 1;
}

message Delegation {
  // The owner of the delegation.
  bytes owner = 1;
  // The delegate address.
  bytes delegate = 2;
  // The date the delegation was created.
  uint64 created_at = 3;
}

message GetDelegationResponse {
  // The delegation.
  Delegation delegation = 1;
}

/*******************
 *** Withdrawals ***
 *******************/

message GetFilteredWithdrawalReceiptsRequest {
  // The page number to return.
  optional uint32 page = 1;
  // The optional maximum number of receipts to return.
  optional uint32 limit = 2;
  // The optional account address to filter for.
  optional bytes address = 3;
}

message WithdrawalReceipt {
  // Withdrawal transaction hash.
  bytes tx_hash = 1;
  // Withdrawal amount.
  string amount = 2;
  // The withdrawal timestamp.
  uint64 created_at = 3;
}

message GetFilteredWithdrawalReceiptsResponse {
  // The withdrawal receipts.
  repeated WithdrawalReceipt receipts = 1;
}


/*************
 *** Enums ***
 *************/

enum ProofMode {
  UNSPECIFIED_PROOF_MODE = 0;
  // The core proof mode.
  CORE = 1;
  // The compressed proof mode.
  COMPRESSED = 2;
  // The plonk proof mode.
  PLONK = 3;
  // The groth16 proof mode.
  GROTH16 = 4;
}

// The different strategies that can be used for fulfilling requests.
enum FulfillmentStrategy {
  UNSPECIFIED_FULFILLMENT_STRATEGY = 0;
  // The hosted fulfillment strategy. Uses Succinct's on-demand prover to fulfill requests.
  HOSTED = 1;
  // The reserved fulfillment strategy. Uses an already existing agreement with a
  // fulfiller to fulfill requests.
  RESERVED = 2;
  // The auction fulfillment strategy. Uses a decentralized proof contest to
  // fulfill requests.
  AUCTION = 3;
}

// The different fulfillment statuses that a request can be in.
enum FulfillmentStatus {
  UNSPECIFIED_FULFILLMENT_STATUS = 0;
  // The request has been requested.
  REQUESTED = 1;
  // The request has been assigned to a fulfiller.
  ASSIGNED = 2;
  // The request has been fulfilled.
  FULFILLED = 3;
  // The request cannot be fulfilled.
  UNFULFILLABLE = 4;
}

// The different execution statuses that a request can be in.
enum ExecutionStatus {
  UNSPECIFIED_EXECUTION_STATUS = 0;
  // The request has not been executed.
  UNEXECUTED = 1;
  // The request has been executed.
  EXECUTED = 2;
  // The request cannot be executed.
  UNEXECUTABLE = 3;
  // The request was executed, but validation failed.
  VALIDATION_FAILED = 4;
}

// The different settlement statuses that a request can be in.
enum SettlementStatus {
  UNSPECIFIED_SETTLEMENT_STATUS = 0;
  // The request has not been settled.
  UNSETTLED = 1;
  // The request has been settled.
  SETTLED = 2;
}

// The different types of balance changes that can occur for credits.
enum BalanceOperation {
  UNSPECIFIED_BALANCE_CHANGE_OPERATION = 0;
  // A deposit operation (positive).
  DEPOSIT = 1;
  // A withdrawal operation (no effect).
  WITHDRAWAL = 2;
  // A reward operation (positive).
  REWARD = 3;
  // A transfer-out operation (negative).
  TRANSFER_OUT = 4;
  // A transfer-in operation (positive).
  TRANSFER_IN = 5;
  // A withdraw request operation (negative).
  WITHDRAW_REQUEST = 6;
}

// The different types of balance changes that can occur for stake.
enum StakeBalanceOperation {
  UNSPECIFIED_STAKE_BALANCE_OPERATION = 0;
  // A stake operation (positive).
  STAKE = 1;
  // An unstake operation (negative).
  UNSTAKE = 2;
  // A slash operation (negative).
  SLASH = 3;
  // A bid operation (negative).
  BID = 4;
}

// The different social platforms.
enum SocialPlatform {
  UNSPECIFIED_PLATFORM = 0;
  // The twitter platform.
  TWITTER = 1;
  // The github platform.
  GITHUB = 2;
  // The discord platform.
  DISCORD = 3;
}

// The different gpu variants.
enum GpuVariant {
  UNSPECIFIED_VARIANT = 0;
  // The blueberry variant.
  BLUEBERRY = 1;
  // The strawberry variant.
  STRAWBERRY = 2;
  // The lime variant.
  LIME = 3;
  // The tangerine variant.
  TANGERINE = 4;
  // The grape variant.
  GRAPE = 5;
}

// The different upgrades that can be purchased with points.
enum Upgrade {
  UNSPECIFIED_UPGRADE = 0;
  // The earn rate boost upgrade.
  EARN_RATE_BOOST = 1;
  // The click worth boost upgrade.
  CLICK_VALUE_BOOST = 2;
  // The clicks per period boost upgrade.
  CLICKS_PER_PERIOD_BOOST = 3;
}

// The different causes for execution failure.
enum ExecuteFailureCause {
  UNSPECIFIED_EXECUTION_FAILURE_CAUSE = 0;
  // The execution failed with a non-zero exit code.
  HALT_WITH_NON_ZERO_EXIT_CODE = 1;
  // The execution failed with an invalid memory access.
  INVALID_MEMORY_ACCESS = 2;
  // The execution failed with an unimplemented syscall.
  UNSUPPORTED_SYSCALL = 3;
  // The execution failed with a breakpoint.
  BREAKPOINT = 4;
  // The execution failed with an exceeded cycle limit.
  EXCEEDED_CYCLE_LIMIT = 5;
  // The execution failed because the syscall was called in unconstrained mode.
  INVALID_SYSCALL_USAGE = 6;
  // The execution failed with an unimplemented feature.
  UNIMPLEMENTED = 7;
  // The program ended in unconstrained mode.
  END_IN_UNCONSTRAINED = 8;
}

// The different types of charges for reserved billing.
enum ChargeType {
  UNSPECIFIED_CHARGE_TYPE = 0;
  // For base reserved cluster usage.
  BASE_CLUSTER = 1;
  // For reserved GPU throughput.
  PROVISIONED_MGAS_PER_SEC = 2;
  // For usage exceeding reserved.
  EXCESS_GAS = 3;
  // For groth16 proofs.
  GROTH16_PROOF = 4;
  // For plonk proofs.
  PLONK_PROOF = 5;
}

// Request to get delegated balance
message GetDelegatedBalanceRequest {
  // The address to query
  bytes address = 1;
}

// Response with delegated balance
message GetDelegatedBalanceResponse {
  // The delegated balance amount
  string balance = 1;
}

// Request to set GPU delegate
message SetGpuDelegateRequest {
  // The GPU ID
  int64 gpu_id = 1;
  // The delegate address
  bytes delegate = 2;
}

// Response for setting GPU delegate
message SetGpuDelegateResponse {
  // Success status
  bool success = 1;
}